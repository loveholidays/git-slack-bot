// Code generated by MockGen. DO NOT EDIT.
// Source: git-slack-bot/internal/slack (interfaces: Client,Interactor)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/slack.go . Client,Interactor
//

// Package mock_slack is a generated GoMock package.
package mock_slack

import (
	reflect "reflect"

	slack "github.com/slack-go/slack"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddReaction mocks base method.
func (m *MockClient) AddReaction(arg0 string, arg1 slack.ItemRef) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReaction indicates an expected call of AddReaction.
func (mr *MockClientMockRecorder) AddReaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReaction", reflect.TypeOf((*MockClient)(nil).AddReaction), arg0, arg1)
}

// GetConversationHistory mocks base method.
func (m *MockClient) GetConversationHistory(arg0 *slack.GetConversationHistoryParameters) (*slack.GetConversationHistoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationHistory", arg0)
	ret0, _ := ret[0].(*slack.GetConversationHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationHistory indicates an expected call of GetConversationHistory.
func (mr *MockClientMockRecorder) GetConversationHistory(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationHistory", reflect.TypeOf((*MockClient)(nil).GetConversationHistory), arg0)
}

// GetUserByEmail mocks base method.
func (m *MockClient) GetUserByEmail(arg0 string) (*slack.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0)
	ret0, _ := ret[0].(*slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockClientMockRecorder) GetUserByEmail(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockClient)(nil).GetUserByEmail), arg0)
}

// PostMessage mocks base method.
func (m *MockClient) PostMessage(arg0 string, arg1 ...slack.MsgOption) (string, string, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostMessage", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PostMessage indicates an expected call of PostMessage.
func (mr *MockClientMockRecorder) PostMessage(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessage", reflect.TypeOf((*MockClient)(nil).PostMessage), varargs...)
}

// RemoveReaction mocks base method.
func (m *MockClient) RemoveReaction(arg0 string, arg1 slack.ItemRef) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveReaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReaction indicates an expected call of RemoveReaction.
func (mr *MockClientMockRecorder) RemoveReaction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReaction", reflect.TypeOf((*MockClient)(nil).RemoveReaction), arg0, arg1)
}

// MockInteractor is a mock of Interactor interface.
type MockInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockInteractorMockRecorder
}

// MockInteractorMockRecorder is the mock recorder for MockInteractor.
type MockInteractorMockRecorder struct {
	mock *MockInteractor
}

// NewMockInteractor creates a new mock instance.
func NewMockInteractor(ctrl *gomock.Controller) *MockInteractor {
	mock := &MockInteractor{ctrl: ctrl}
	mock.recorder = &MockInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractor) EXPECT() *MockInteractorMockRecorder {
	return m.recorder
}

// AddReactionToMessage mocks base method.
func (m *MockInteractor) AddReactionToMessage(arg0 string, arg1 *slack.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddReactionToMessage", arg0, arg1)
}

// AddReactionToMessage indicates an expected call of AddReactionToMessage.
func (mr *MockInteractorMockRecorder) AddReactionToMessage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReactionToMessage", reflect.TypeOf((*MockInteractor)(nil).AddReactionToMessage), arg0, arg1)
}

// GetMessage mocks base method.
func (m *MockInteractor) GetMessage(arg0 string) (*slack.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage", arg0)
	ret0, _ := ret[0].(*slack.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockInteractorMockRecorder) GetMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockInteractor)(nil).GetMessage), arg0)
}

// GetUserIDByEmail mocks base method.
func (m *MockInteractor) GetUserIDByEmail(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByEmail", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByEmail indicates an expected call of GetUserIDByEmail.
func (mr *MockInteractorMockRecorder) GetUserIDByEmail(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByEmail", reflect.TypeOf((*MockInteractor)(nil).GetUserIDByEmail), arg0)
}

// RemoveReactionFromMessage mocks base method.
func (m *MockInteractor) RemoveReactionFromMessage(arg0 string, arg1 *slack.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveReactionFromMessage", arg0, arg1)
}

// RemoveReactionFromMessage indicates an expected call of RemoveReactionFromMessage.
func (mr *MockInteractorMockRecorder) RemoveReactionFromMessage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReactionFromMessage", reflect.TypeOf((*MockInteractor)(nil).RemoveReactionFromMessage), arg0, arg1)
}

// SendMessage mocks base method.
func (m *MockInteractor) SendMessage(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendMessage", arg0)
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockInteractorMockRecorder) SendMessage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockInteractor)(nil).SendMessage), arg0)
}

// SendReply mocks base method.
func (m *MockInteractor) SendReply(arg0 *slack.Message, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendReply", arg0, arg1)
}

// SendReply indicates an expected call of SendReply.
func (mr *MockInteractorMockRecorder) SendReply(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendReply", reflect.TypeOf((*MockInteractor)(nil).SendReply), arg0, arg1)
}
