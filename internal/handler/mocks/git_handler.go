// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handler/git_handler.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGitEventHandler is a mock of GitEventHandler interface.
type MockGitEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGitEventHandlerMockRecorder
}

// MockGitEventHandlerMockRecorder is the mock recorder for MockGitEventHandler.
type MockGitEventHandlerMockRecorder struct {
	mock *MockGitEventHandler
}

// NewMockGitEventHandler creates a new mock instance.
func NewMockGitEventHandler(ctrl *gomock.Controller) *MockGitEventHandler {
	mock := &MockGitEventHandler{ctrl: ctrl}
	mock.recorder = &MockGitEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitEventHandler) EXPECT() *MockGitEventHandlerMockRecorder {
	return m.recorder
}

// HandleIssueCommentEvent mocks base method.
func (m *MockGitEventHandler) HandleIssueCommentEvent(body []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleIssueCommentEvent", body)
}

// HandleIssueCommentEvent indicates an expected call of HandleIssueCommentEvent.
func (mr *MockGitEventHandlerMockRecorder) HandleIssueCommentEvent(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleIssueCommentEvent", reflect.TypeOf((*MockGitEventHandler)(nil).HandleIssueCommentEvent), body)
}

// HandlePullRequestEvent mocks base method.
func (m *MockGitEventHandler) HandlePullRequestEvent(body []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandlePullRequestEvent", body)
}

// HandlePullRequestEvent indicates an expected call of HandlePullRequestEvent.
func (mr *MockGitEventHandlerMockRecorder) HandlePullRequestEvent(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePullRequestEvent", reflect.TypeOf((*MockGitEventHandler)(nil).HandlePullRequestEvent), body)
}

// HandlePullRequestReviewCommentEvent mocks base method.
func (m *MockGitEventHandler) HandlePullRequestReviewCommentEvent(body []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandlePullRequestReviewCommentEvent", body)
}

// HandlePullRequestReviewCommentEvent indicates an expected call of HandlePullRequestReviewCommentEvent.
func (mr *MockGitEventHandlerMockRecorder) HandlePullRequestReviewCommentEvent(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePullRequestReviewCommentEvent", reflect.TypeOf((*MockGitEventHandler)(nil).HandlePullRequestReviewCommentEvent), body)
}

// HandlePullRequestReviewEvent mocks base method.
func (m *MockGitEventHandler) HandlePullRequestReviewEvent(body []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandlePullRequestReviewEvent", body)
}

// HandlePullRequestReviewEvent indicates an expected call of HandlePullRequestReviewEvent.
func (mr *MockGitEventHandlerMockRecorder) HandlePullRequestReviewEvent(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePullRequestReviewEvent", reflect.TypeOf((*MockGitEventHandler)(nil).HandlePullRequestReviewEvent), body)
}
