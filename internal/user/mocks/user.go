// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/user.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetUserDescriptor mocks base method.
func (m *MockService) GetUserDescriptor(githubLogin string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDescriptor", githubLogin)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserDescriptor indicates an expected call of GetUserDescriptor.
func (mr *MockServiceMockRecorder) GetUserDescriptor(githubLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDescriptor", reflect.TypeOf((*MockService)(nil).GetUserDescriptor), githubLogin)
}

// IsIgnoredCommentUser mocks base method.
func (m *MockService) IsIgnoredCommentUser(githubLogin string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsIgnoredCommentUser", githubLogin)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsIgnoredCommentUser indicates an expected call of IsIgnoredCommentUser.
func (mr *MockServiceMockRecorder) IsIgnoredCommentUser(githubLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsIgnoredCommentUser", reflect.TypeOf((*MockService)(nil).IsIgnoredCommentUser), githubLogin)
}

// IsTeamMember mocks base method.
func (m *MockService) IsTeamMember(githubLogin string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTeamMember", githubLogin)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTeamMember indicates an expected call of IsTeamMember.
func (mr *MockServiceMockRecorder) IsTeamMember(githubLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTeamMember", reflect.TypeOf((*MockService)(nil).IsTeamMember), githubLogin)
}
